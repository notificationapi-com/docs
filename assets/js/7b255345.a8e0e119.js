"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[978],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),f=l(r),m=i,d=f["".concat(s,".").concat(m)]||f[m]||u[m]||a;return r?n.createElement(d,o(o({ref:t},p),{},{components:r})):n.createElement(d,o({ref:t},p))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[f]="string"==typeof e?e:i,o[1]=c;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7891:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=r(7462),i=(r(7294),r(3905));const a=r.p+"assets/images/userpref-5ebda40a7b681b452100fa75c31c9942.gif",o={sidebar_position:3},c="\u2699\ufe0f User notification preferences",s={unversionedId:"quick-start/manage-preferences",id:"quick-start/manage-preferences",title:"\u2699\ufe0f User notification preferences",description:"Overview",source:"@site/docs/quick-start/manage-preferences.md",sourceDirName:"quick-start",slug:"/quick-start/manage-preferences",permalink:"/quick-start/manage-preferences",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udd14 Display in-app notifications",permalink:"/quick-start/display-inapp-notifications"},next:{title:"\ud83d\udcc4 How does it work?",permalink:"/quick-start/how-does-it-work"}},l={},p=[{value:"Overview",id:"overview",level:2},{value:"Notification Preferences Widget",id:"notification-preferences-widget",level:2},{value:"Programmatically Update Preferences",id:"programmatically-update-preferences",level:2}],f={toc:p},u="wrapper";function m(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\ufe0f-user-notification-preferences"},"\u2699\ufe0f User notification preferences"),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"NotificationAPI stores your end-users' notification preferences and automatically applies it to outgoing notifications. Notification preferences for a user can be set in different ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Our pre-built ",(0,i.kt)("strong",{parentName:"li"},"Notification Preferences Widget")," for your front-end (for users)"),(0,i.kt)("li",{parentName:"ul"},"Our APIs and SDKs to ",(0,i.kt)("strong",{parentName:"li"},"programmatically set the preferences")," (for developers)"),(0,i.kt)("li",{parentName:"ul"},"Coming soon: ",(0,i.kt)("strong",{parentName:"li"},"visually set the preferences from our dashboard")," (for non-technical team members)")),(0,i.kt)("p",null,"Let's cover this all:"),(0,i.kt)("h2",{id:"notification-preferences-widget"},"Notification Preferences Widget"),(0,i.kt)("p",null,"Our notification preferences widget works out-of-the-box with most front-end frameworks and automatically displays and syncs the user's preferences with our servers."),(0,i.kt)("img",{src:a,style:{maxWidth:300,marginBottom:30}}),(0,i.kt)("p",null,"There are 2 ways to access the widget:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Through the \u2699\ufe0f icon on our in-app notifications widget")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Programmatically through our front-end SDK:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// npm install notificationapi-js-client-sdk\nimport NotificationAPIClient from 'notificationapi-js-client-sdk';\n\nconst notificationapi = new NotificationAPIClient({\n  clientId: 'CLIENT_ID',\n  userId: 'USER_ID'\n});\nnotificationapi.showUserPreferences();\n")),(0,i.kt)("h2",{id:"programmatically-update-preferences"},"Programmatically Update Preferences"),(0,i.kt)("p",null,"You can set the user preferences programmatically from both your back-end and front-end code:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"reference/js-client#set-user-preferences"},"Front-end reference")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"reference/server#set-user-preferences"},"Back-end reference"))))}m.isMDXComponent=!0}}]);