"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[726],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=a.createContext({}),u=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},l=function(e){var n=u(e.components);return a.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(t),f=i,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||o;return t?a.createElement(m,r(r({ref:n},l),{},{components:t})):a.createElement(m,r({ref:n},l))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:i,r[1]=s;for(var u=2;u<o;u++)r[u]=t[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>r});var a=t(7294),i=t(6010);const o={tabItem:"tabItem_Ymn6"};function r(e){let{children:n,hidden:t,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(o.tabItem,r),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>I});var a=t(7462),i=t(7294),o=t(6010),r=t(2466),s=t(6550),c=t(1980),u=t(7392),l=t(12);function p(e){return function(e){return i.Children.map(e,(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:i}}=e;return{value:n,label:t,attributes:a,default:i}}))}function d(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??p(t);return function(e){const n=(0,u.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function f(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const a=(0,s.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c._X)(o),(0,i.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function h(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=d(e),[r,s]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!f({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:o}))),[c,u]=m({queryString:t,groupId:a}),[p,h]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,l.Nk)(t);return[a,(0,i.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),g=(()=>{const e=c??p;return f({value:e,tabValues:o})?e:null})();(0,i.useLayoutEffect)((()=>{g&&s(g)}),[g]);return{selectedValue:r,selectValue:(0,i.useCallback)((e=>{if(!f({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),h(e)}),[u,h,o]),tabValues:o}}var g=t(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:n,block:t,selectedValue:s,selectValue:c,tabValues:u}=e;const l=[],{blockElementScrollPositionUntilNextRender:p}=(0,r.o5)(),d=e=>{const n=e.currentTarget,t=l.indexOf(n),a=u[t].value;a!==s&&(p(n),c(a))},f=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},u.map((e=>{let{value:n,label:t,attributes:r}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,key:n,ref:e=>l.push(e),onKeyDown:f,onClick:d},r,{className:(0,o.Z)("tabs__item",b.tabItem,r?.className,{"tabs__item--active":s===n})}),t??n)})))}function v(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function k(e){const n=h(e);return i.createElement("div",{className:(0,o.Z)("tabs-container",b.tabList)},i.createElement(y,(0,a.Z)({},e,n)),i.createElement(v,(0,a.Z)({},e,n)))}function I(e){const n=(0,g.Z)();return i.createElement(k,(0,a.Z)({key:String(n)},e))}},6644:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>u,toc:()=>p});var a=t(7462),i=(t(7294),t(3905)),o=t(4866),r=t(5162);const s={sidebar_position:1},c="\ud83d\ude80 Send a notification",u={unversionedId:"quick-start/send-a-notification",id:"quick-start/send-a-notification",title:"\ud83d\ude80 Send a notification",description:"Prerequisite",source:"@site/docs/quick-start/send-a-notification.md",sourceDirName:"quick-start",slug:"/quick-start/send-a-notification",permalink:"/quick-start/send-a-notification",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Home",permalink:"/"},next:{title:"\ud83d\udd14 Display in-app notifications",permalink:"/quick-start/display-inapp-notifications"}},l={},p=[{value:"Prerequisite",id:"prerequisite",level:4},{value:"Overview",id:"overview",level:2},{value:"Step 1: Setup the SDK",id:"step-1-setup-the-sdk",level:2},{value:"Step 2: Send the Notification",id:"step-2-send-the-notification",level:2},{value:"Next Steps",id:"next-steps",level:2}],d={toc:p},f="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(f,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"-send-a-notification"},"\ud83d\ude80 Send a notification"),(0,i.kt)("h4",{id:"prerequisite"},"Prerequisite"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A NotificationAPI account - ",(0,i.kt)("a",{parentName:"li",href:"https://app.notificationapi.com/signup"},"sign up for free")),(0,i.kt)("li",{parentName:"ul"},"A configured notification in the dashboard (new accounts already have a demo notification)")),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Your team, even non-technical members, can use our dashboard to configure and design your standard notifications without any coding knowledge. For example, they would configure an alert to go over email and completely design its content, subject, etc."),(0,i.kt)("p",null,"Then, through our SDKs or API, your back-end lets us know when to send this notification to a user. We then take care of the rest."),(0,i.kt)("p",null,"Let's learn..."),(0,i.kt)("h2",{id:"step-1-setup-the-sdk"},"Step 1: Setup the SDK"),(0,i.kt)(o.Z,{groupId:"back-end-language",defaultValue:"js",values:[{label:"Node",value:"js"},{label:"Python",value:"python"},{label:"PHP",value:"php"},{label:"Go",value:"go"},{label:"C#",value:"csharp"},{label:"Ruby",value:"ruby"}],mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install notificationapi-node-server-sdk\n# yarn add notificationapi-node-server-sdk\n# pnpm add notificationapi-node-server-sdk\n"))),(0,i.kt)(r.Z,{value:"python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip install notificationapi_python_server_sdk\n"))),(0,i.kt)(r.Z,{value:"php",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"composer require notificationapi/notificationapi-php-server-sdk\n"))),(0,i.kt)(r.Z,{value:"go",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go get github.com/notificationapi-com/notificationapi-go-server-sdk\n"))),(0,i.kt)(r.Z,{value:"csharp",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// Create the followinng class in your application:\n\nusing System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\n\nclass NotificationAPI {\n  private string baseURL = "https://api.notificationapi.com";\n  private string clientId;\n  private HttpClient httpClient;\n\n  public NotificationAPI(string clientId, string clientSecret) {\n    this.clientId = clientId;\n    string authToken = Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes($"{clientId}:{clientSecret}"));\n    this.httpClient = new HttpClient();\n    this.httpClient.DefaultRequestHeaders.Add("Authorization", $"Basic {authToken}");\n  }\n\n  public async Task<string> send(string request) {\n    HttpContent payload = new StringContent(request, Encoding.UTF8, "application/json");\n    var response = await this.httpClient.PostAsync($"{this.baseURL}/{this.clientId}/sender", payload);\n    var responseContent = await response.Content.ReadAsStringAsync();\n    return responseContent;\n  }\n\n  public async Task<string> retract(string request) {\n    HttpContent payload = new StringContent(request, Encoding.UTF8, "application/json");\n    var response = await this.httpClient.PostAsync($"{this.baseURL}/{this.clientId}/sender/retract", payload);\n    var responseContent = await response.Content.ReadAsStringAsync();\n    return responseContent;\n  }\n\n  public async Task<string> IdentifyUser(string userId, object userData) {\n      using (var hmac = new HMACSHA256(Encoding.ASCII.GetBytes(clientSecret))) {\n          string hashedUserId = Convert.ToBase64String(hmac.ComputeHash(Encoding.ASCII.GetBytes(userId)));\n          string customAuth = Convert.ToBase64String(Encoding.ASCII.GetBytes($"{clientId}:{userId}:{hashedUserId}"));\n          httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", customAuth);\n\n          string jsonString = JsonConvert.SerializeObject(userData);\n          HttpContent content = new StringContent(jsonString, Encoding.UTF8, "application/json");\n          var response = await httpClient.PostAsync($"{baseURL}/{clientId}/users/{Uri.EscapeDataString(userId)}", content);\n          return await response.Content.ReadAsStringAsync();\n      }\n  }\n\n  public async Task<string> CreateSubNotification(string notificationId, string subNotificationId, string title) {\n      var payload = new { title = title };\n      string jsonString = JsonConvert.SerializeObject(payload);\n      HttpContent content = new StringContent(jsonString, Encoding.UTF8, "application/json");\n      var response = await httpClient.PutAsync($"{baseURL}/{clientId}/notifications/{notificationId}/subNotifications/{subNotificationId}", content);\n      return await response.Content.ReadAsStringAsync();\n  }\n\n  public async Task<string> DeleteSubNotification(string notificationId, string subNotificationId) {\n      var response = await httpClient.DeleteAsync($"{baseURL}/{clientId}/notifications/{notificationId}/subNotifications/{subNotificationId}");\n      return await response.Content.ReadAsStringAsync();\n  }\n\n  public async Task<string> SetUserPreferences(string userId, object userPreferences) {\n      string jsonString = JsonConvert.SerializeObject(userPreferences);\n      HttpContent content = new StringContent(jsonString, Encoding.UTF8, "application/json");\n      var response = await httpClient.PostAsync($"{baseURL}/{clientId}/user_preferences/{userId}", content);\n      return await response.Content.ReadAsStringAsync();\n  }\n\n}\n'))),(0,i.kt)(r.Z,{value:"ruby",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# Create the following class in your application\n\nrequire 'net/http'\nrequire 'json'\nrequire 'base64'\nrequire 'openssl'\n\nclass NotificationAPI\n  def initialize(client_id, client_secret)\n    @base_url = 'https://api.notificationapi.com'\n    @client_id = client_id\n    @auth_token = Base64.strict_encode64(\"#{client_id}:#{client_secret}\")\n    @http_client = Net::HTTP.new('api.notificationapi.com', 443)\n    @http_client.use_ssl = true\n  end\n\n  def send(request)\n    payload = request.to_json\n    response = @http_client.post(\n      \"/#{@client_id}/sender\",\n      payload,\n      {\n        'Content-Type' => 'application/json',\n        'Authorization' => \"Basic #{@auth_token}\"\n      }\n    )\n    response.body\n  end\n\n  def retract(request)\n    payload = request.to_json\n    response = @http_client.post(\n      \"/#{@client_id}/sender/retract\",\n      payload,\n      {\n        'Content-Type' => 'application/json',\n        'Authorization' => \"Basic #{@auth_token}\"\n      }\n    )\n    response.body\n  end\n\n  def identify_user(user_id, user_data)\n    digest = OpenSSL::Digest::SHA256.new\n    hmac = OpenSSL::HMAC.digest(digest, @client_secret, user_id)\n    hashed_user_id = Base64.strict_encode64(hmac)\n    custom_auth = Base64.strict_encode64(\"#{@client_id}:#{user_id}:#{hashed_user_id}\")\n\n    send_request('POST', \"users/#{URI.escape(user_id)}\", user_data, custom_auth)\n  end\n\n  def create_sub_notification(notification_id, sub_notification_id, title)\n    payload = { title: title }\n    send_request('PUT', \"notifications/#{notification_id}/subNotifications/#{sub_notification_id}\", payload)\n  end\n\n  def delete_sub_notification(notification_id, sub_notification_id)\n    send_request('DELETE', \"notifications/#{notification_id}/subNotifications/#{sub_notification_id}\")\n  end\n\n  def set_user_preferences(user_id, user_preferences)\n    send_request('POST', \"user_preferences/#{user_id}\", user_preferences)\n  end\n\n  private\n\n  def send_request(method, uri, data = {}, auth = \"Basic #{@auth_token}\")\n    payload = data.to_json\n    response = @http_client.send_request(\n      method,\n      \"/#{@client_id}/#{uri}\",\n      payload,\n      {\n        'Content-Type' => 'application/json',\n        'Authorization' => auth\n      }\n    )\n    response.body\n  end\n\nend\n")))),(0,i.kt)("h2",{id:"step-2-send-the-notification"},"Step 2: Send the Notification"),(0,i.kt)("p",null,"Our ",(0,i.kt)("inlineCode",{parentName:"p"},"send")," function or ",(0,i.kt)("inlineCode",{parentName:"p"},"POST /sender")," API call takes a JSON payload that specifies which notification to send and to whom. It also has a ",(0,i.kt)("inlineCode",{parentName:"p"},"mergeTags")," field that you can use to personalize the notification."),(0,i.kt)(o.Z,{groupId:"back-end-language",defaultValue:"js",values:[{label:"Node",value:"js"},{label:"Python",value:"python"},{label:"PHP",value:"php"},{label:"Go",value:"go"},{label:"C#",value:"csharp"},{label:"Ruby",value:"ruby"}],mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// import/require:\nimport notificationapi from 'notificationapi-node-server-sdk';\n// const notificationapi = require('notificationapi-node-server-sdk').default\n\n// init\nnotificationapi.init('CLIENT_ID', 'CLIENT_SECRET');\n\n// send\nnotificationapi.send({\n  // The ID of the notification you wish to send.\n  // You can find this value from the dashboard.\n  notificationId: 'order_tracking',\n  // The user to send the notification to.\n  user: {\n    id: 'spongebob.squarepants',\n    email: 'spongebob@squarepants.com' //required for email notifications\n  },\n  // mergeTags is to pass dynamic values into the notification design.\n  mergeTags: {\n    item: 'Krabby Patty Burger',\n    address: '124 Conch Street',\n    orderId: '1234567890'\n  }\n});\n"))),(0,i.kt)(r.Z,{value:"python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'# import\nfrom notificationapi_python_server_sdk import (notificationapi)\n\n# init\nnotificationapi.init("CLIENT_ID", "CLIENT_SECRET")\n\n# send\nnotificationapi.send({\n        #The ID of the notification you wish to send. You can find this\n        #value from the dashboard.\n        "notificationId": "order_tracking",\n\n        # The user to send the notification to.\n        "user": {\n            "id": "spongebob.squarepants",\n            "email": "spongebob@squarepants.com", # required for email notifications\n        },\n        # mergeTags is to pass dynamic values into the notification design.\n        "mergeTags": {\n            "item": "Krabby Patty Burger",\n            "address": "124 Conch Street",\n            "orderId": "1234567890"\n        }\n    })\n'))),(0,i.kt)(r.Z,{value:"php",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'# import\nuse NotificationAPI\\NotificationAPI;\n\n# init\n$notificationapi = new NotificationAPI(\'CLIENT_ID\', \'CLIENT_SECRET\');\n\n# send\n$notificationapi->send([\n    #The ID of the notification you wish to send. You can find this\n    #value from the dashboard.\n    "notificationId" => "order_tracking",\n    # The user to send the notification to.\n    "user" => [\n        "id" => "spongebob.squarepants",\n        "email" => "spongebob@squarepants.com",   # required for email notifications\n    ],\n    # mergeTags is to pass dynamic values into the notification design.\n    "mergeTags" => [\n        "item" => "Krabby Patty Burger",\n        "address" => "124 Conch Street",\n        "orderId" => "1234567890"\n    ]\n]);\n'))),(0,i.kt)(r.Z,{value:"go",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\n// import\nimport (\n    notificationapi "github.com/notificationapi-com/notificationapi-go-server-sdk"\n  "encoding/json"\n)\n\nfunc main() {\n    // init\n    notificationapi.Init("CLIENT_ID", "CLIENT_SECRET")\n\n  //mergeTags is to pass dynamic values into the notification design.\n  mergeTags := make(map[string]interface{}) // Change to map[string]interface{}\n  mergeTags["item"] = "Krabby Patty Burger"\n  mergeTags["address"] = "124 Conch Street"\n  mergeTags["orderId"] = "1234567890"\n\n  notificationapi.Send(\n    notificationapi.SendRequest{\n      //The ID of the notification you wish to send. You can find this\n      //value from the dashboard.\n      NotificationId: "order_tracking",\n      //The user to send the notification to.\n      User: notificationapi.User{\n        Id:     "spongebob.squarepants",\n        Email:  "spongebob@squarepants.com",\n      },\n      MergeTags: mergeTags,\n    },\n  )\n}\n\n'))),(0,i.kt)(r.Z,{value:"csharp",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'NotificationAPI notificationapi = new NotificationAPI("CLIENT_ID", "CLIENT_SECRET");\nstring request = @"{\n    ""notificationId"": ""order_tracking"",\n    ""user"": {\n        ""id"": ""spongebob.squarepants"",\n        ""email"": ""spongebob@squarepants.com""\n    },\n    ""mergeTags"": {\n        ""item"": ""Krabby Patty Burger"",\n        ""address"": ""124 Conch Street"",\n        ""orderId"": ""1234567890""\n    }\n}";\nnotificationapi.send(request);\n'))),(0,i.kt)(r.Z,{value:"ruby",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# require:\nrequire './NotificationAPI'\n\n# init\nnotificationapi = NotificationAPI.new(\"CLIENT_ID\", \"CLIENT_SECRET\")\n\n# send\nnotificationapi.send({\n  #The ID of the notification you wish to send. You can find this\n  #value from the dashboard.\n  notificationId: 'order_tracking',\n  # The user to send the notification to.\n  user: {\n    id: 'spongebob.squarepants',\n    email: 'spongebob@squarepants.com', # required for email notifications\n  },\n  # mergeTags is to pass dynamic values into the notification design.\n  mergeTags: {\n    item: 'Krabby Patty Burger',\n    address: '124 Conch Street',\n    orderId: '1234567890'\n  }\n});\n")))),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"You can get your CLIENT_ID and CLIENT_SECRET from ",(0,i.kt)("a",{parentName:"p",href:"https://app.notificationapi.com/environments"},"here"),".")),(0,i.kt)("h2",{id:"next-steps"},"Next Steps"),(0,i.kt)("p",null,"You are now successfully sending notifications to any channel you wish. \ud83c\udf89"),(0,i.kt)("p",null,"Let's do a few more things:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../quick-start/display-inapp-notifications"},"\ud83d\udd14 Display In-App Notifications")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../quick-start/manage-preferences"},"\u2699\ufe0f Manage User Notification Preferences")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../guides/mobile-push"},"\ud83d\udcf1 Setup Mobile Push")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../guides/web-push"},"\ud83c\udf10 Setup Web Push"))))}m.isMDXComponent=!0}}]);