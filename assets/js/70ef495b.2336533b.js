"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[126],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>m});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function r(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):r(r({},t),e)),i},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(i),f=a,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||o;return i?n.createElement(m,r(r({ref:t},p),{},{components:i})):n.createElement(m,r({ref:t},p))}));function m(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=i.length,r=new Array(o);r[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,r[1]=s;for(var c=2;c<o;c++)r[c]=i[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,i)}f.displayName="MDXCreateElement"},5956:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=i(7462),a=(i(7294),i(3905));const o={sidebar_position:4},r="Android SDK (Front-End)",s={unversionedId:"reference/android_sdk",id:"reference/android_sdk",title:"Android SDK (Front-End)",description:"The Android SDK is used to recieve push notifications and handle device token synchronization with NotificationAPI.",source:"@site/docs/reference/android_sdk.md",sourceDirName:"reference",slug:"/reference/android_sdk",permalink:"/reference/android_sdk",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"iOS SDK (Front-End)",permalink:"/reference/ios-sdk"}},l={},c=[{value:"Setup",id:"setup",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"NotificationApiService",id:"notificationapiservice",level:2},{value:"fun onPreDisplayNotification(message: RemoteMessage)",id:"fun-onpredisplaynotificationmessage-remotemessage",level:3},{value:"Parameters",id:"parameters",level:4},{value:"fun displayNotification(intent: NotificationApiIntent, icon: Int, channelId: String, channelName: String): Int",id:"fun-displaynotificationintent-notificationapiintent-icon-int-channelid-string-channelname-string-int",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns",level:4},{value:"fun onNewToken(token: String)",id:"fun-onnewtokentoken-string",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"NotificationApiActivity",id:"notificationapiactivity",level:2},{value:"fun onNotificationClicked(message: RemoteMessage)",id:"fun-onnotificationclickedmessage-remotemessage",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"fun onNotificationRequestPermissionResult(isGranted: Boolean)",id:"fun-onnotificationrequestpermissionresultisgranted-boolean",level:3},{value:"NotificationApi",id:"notificationapi",level:2},{value:"fun configure(credentials: NotificationApiCredentials, config: NotificationApiConfig)",id:"fun-configurecredentials-notificationapicredentials-config-notificationapiconfig",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"fun askNotificationPermissions(requestCode: Int)",id:"fun-asknotificationpermissionsrequestcode-int",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"NotificationApiCredentials",id:"notificationapicredentials",level:2},{value:"constructor NotificationApiCredentials(val clientId: String, val userId: String, val hashedUserId: String?)",id:"constructor-notificationapicredentialsval-clientid-string-val-userid-string-val-hasheduserid-string",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"NotificationApiConfig",id:"notificationapiconfig",level:2},{value:"constructor NotificationApiConfig(val baseUrl: String)",id:"constructor-notificationapiconfigval-baseurl-string",level:3},{value:"Parameters",id:"parameters-7",level:4}],p={toc:c},d="wrapper";function u(e){let{components:t,...i}=e;return(0,a.kt)(d,(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"android-sdk-front-end"},"Android SDK (Front-End)"),(0,a.kt)("p",null,"The Android SDK is used to recieve ",(0,a.kt)("strong",{parentName:"p"},"push notifications")," and handle device token synchronization with NotificationAPI."),(0,a.kt)("p",null,"Supported environments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Android API 24 and above")),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,"Add the JitPack repository in your ",(0,a.kt)("inlineCode",{parentName:"p"},"build.gradle"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-gradle"},"allprojects {\n    repositories {\n        ...\n        maven { url 'https://jitpack.io' }\n    }\n}\n")),(0,a.kt)("p",null,"Then add the Android SDK dependency."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-gradle"},"dependencies {\n    implementation 'com.github.notificationapi:notificationapi-android-sdk:1.0.0'\n}\n")),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"Create a new service that extends from ",(0,a.kt)("inlineCode",{parentName:"p"},"NotificationApiService")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="MyService.kt"',title:'"MyService.kt"'},"class MyService: NotificationApiService() {\n\n    // Handle FCM tokens whenever they are generated\n    override fun onNewToken(token: String) {\n        super.onNewToken(token)\n    }\n\n    // Build notifications before displaying them to the user\n    override fun onPreDisplayNotification(message: RemoteMessage) {\n        val onClickIntent = NotificationApiIntent(this, MainActivity::class.java, message)\n\n        displayNotification(\n            intent = onClickIntent,\n            icon = android.R.drawable.ic_dialog_info\n        )\n    }\n}\n")),(0,a.kt)("p",null,"Add your service to ",(0,a.kt)("inlineCode",{parentName:"p"},"AndroidManifest.xml")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="AndroidManifext.xml"',title:'"AndroidManifext.xml"'},'<service\n    android:name=".MyService"\n    android:exported="false">\n    <intent-filter>\n        <action android:name="com.google.firebase.MESSAGING_EVENT" />\n    </intent-filter>\n</service>\n')),(0,a.kt)("p",null,"Create a new activity that extends from ",(0,a.kt)("inlineCode",{parentName:"p"},"NotificationApiActivity")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="MainActivity.kt"',title:'"MainActivity.kt"'},'class MainActivity : NotificationApiActivity() {\n    companion object {\n        const val TAG = "Example App"\n    }\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Configure NotificationAPI with credentials\n        NotificationApi.shared.configure(\n            NotificationApiCredentials(\n            clientId = "CLIENT_ID",\n            userId = "USER_ID"\n            )\n        )\n\n        // Request the user\'s permission to use notifications\n        NotificationApi.shared.askNotificationPermissions()\n    }\n\n    // Handle clicked notifications\n    override fun onNotificationClicked(message: RemoteMessage) {\n        super.onNotificationClicked(message)\n\n        Log.d(TAG, "Notification was clicked on")\n    }\n\n    // Handle notification permission request results\n    override fun onNotificationRequestPermissionResult(isGranted: Boolean) {\n        super.onNotificationRequestPermissionResult(isGranted)\n        Log.d(TAG, "Notifications are authorized?: $isGranted")\n    }\n}\n')),(0,a.kt)("p",null,"You must configure the SDK with your ",(0,a.kt)("inlineCode",{parentName:"p"},"NotificationAPI")," credentials. It is recommended to configure the SDK as early as possible. You must also request notification authorization from the user. "),(0,a.kt)("p",null,"You are now ready to recieve push notifications from NotificationAPI! \ud83c\udf89"),(0,a.kt)("h2",{id:"notificationapiservice"},"NotificationApiService"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"NotificationApiService")," class handles device token synchronization with NotificationAPI. It is required to extend from this class in order to recieve push notifications from NotificationAPI."),(0,a.kt)("h3",{id:"fun-onpredisplaynotificationmessage-remotemessage"},"fun onPreDisplayNotification(message: RemoteMessage)"),(0,a.kt)("p",null,"This function is called after ",(0,a.kt)("inlineCode",{parentName:"p"},"NotificationApiService")," has recieved a notification but before displaying the notification. You can override ",(0,a.kt)("inlineCode",{parentName:"p"},"onPreDisplayNotification()")," to customize how the notification will be displayed. To use the default notification display, you must call ",(0,a.kt)("inlineCode",{parentName:"p"},"displayNotification()")," here."),(0,a.kt)("h4",{id:"parameters"},"Parameters"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"message"),(0,a.kt)("br",{parentName:"p"}),"\n","Type: ",(0,a.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/reference/kotlin/com/google/firebase/messaging/RemoteMessage"},"RemoteMessage")),(0,a.kt)("p",null,"The Firebase message that contains the notification."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"NotificationAPI sends notification data through Firebase as data messages instead of notification messages. You may use ",(0,a.kt)("inlineCode",{parentName:"p"},'message.data["title"]')," and ",(0,a.kt)("inlineCode",{parentName:"p"},'message.data["body"]')," to get the notification's title and body respectively. You can read more about data and notification messages at ",(0,a.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/cloud-messaging/concept-options#notifications_and_data_messages"},"Firebase's documentation"),".")),(0,a.kt)("h3",{id:"fun-displaynotificationintent-notificationapiintent-icon-int-channelid-string-channelname-string-int"},"fun displayNotification(intent: NotificationApiIntent, icon: Int, channelId: String, channelName: String): Int"),(0,a.kt)("p",null,"This function displays a default notification to the given notification channel. This will create the notification channel if it does not exist. You should call this within ",(0,a.kt)("inlineCode",{parentName:"p"},"onPreDisplayNotification()")," to actually display the notification to the user."),(0,a.kt)("h4",{id:"parameters-1"},"Parameters"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"intent")," (required)",(0,a.kt)("br",{parentName:"p"}),"\n","Type: NotificationApiIntent"),(0,a.kt)("p",null,"An intent that contains the notification click handler as well as the remote message that will be displayed."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"icon"),"  (required)",(0,a.kt)("br",{parentName:"p"}),"\n","Type: Int"),(0,a.kt)("p",null,"The icon to display for the notification."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"channelId"),(0,a.kt)("br",{parentName:"p"}),"\n","Type: String"),(0,a.kt)("p",null,"The channel id to use for displaying the notification. Defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},'"default"'),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"channelName"),(0,a.kt)("br",{parentName:"p"}),"\n","Type: String"),(0,a.kt)("p",null,"The user friendly name of the channel to display the notification in. Defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},'"Notifications"')),(0,a.kt)("h4",{id:"returns"},"Returns"),(0,a.kt)("p",null,"An UUID for the displayed notification."),(0,a.kt)("h3",{id:"fun-onnewtokentoken-string"},"fun onNewToken(token: String)"),(0,a.kt)("p",null,"This function is called when FCM generates a new device token."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"You should always call ",(0,a.kt)("inlineCode",{parentName:"p"},"super.onNewToken(token)")," to allow ",(0,a.kt)("inlineCode",{parentName:"p"},"NotificationApiService")," to sync the device token to NotificationApi.")),(0,a.kt)("h4",{id:"parameters-2"},"Parameters"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"token"),(0,a.kt)("br",{parentName:"p"}),"\n","Type: String"),(0,a.kt)("p",null,"The FCM device token."),(0,a.kt)("h2",{id:"notificationapiactivity"},"NotificationApiActivity"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"NotificationApiActivity")," class initializes the ",(0,a.kt)("inlineCode",{parentName:"p"},"NotificationApi")," instance and provides functionality to handle notification clicking and notification permission request results. It is recommended to extend from this class."),(0,a.kt)("h3",{id:"fun-onnotificationclickedmessage-remotemessage"},"fun onNotificationClicked(message: RemoteMessage)"),(0,a.kt)("p",null,"This function is called when a notification has been clicked on by an user."),(0,a.kt)("h4",{id:"parameters-3"},"Parameters"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"message"),(0,a.kt)("br",{parentName:"p"}),"\n","Type: ",(0,a.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/reference/kotlin/com/google/firebase/messaging/RemoteMessage"},"RemoteMessage")),(0,a.kt)("p",null,"The notification that was clicked on."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"NotificationAPI sends notification data through Firebase as data messages instead of notification messages. You may use ",(0,a.kt)("inlineCode",{parentName:"p"},'message.data["title"]')," and ",(0,a.kt)("inlineCode",{parentName:"p"},'message.data["body"]')," to get the notification's title and body respectively. You can read more about data and notification messages at ",(0,a.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/cloud-messaging/concept-options#notifications_and_data_messages"},"Firebase's documentation"),".")),(0,a.kt)("h3",{id:"fun-onnotificationrequestpermissionresultisgranted-boolean"},"fun onNotificationRequestPermissionResult(isGranted: Boolean)"),(0,a.kt)("p",null,"This function is called when the user has responded to ",(0,a.kt)("inlineCode",{parentName:"p"},"NotificationApi.askNotificationPermissions()"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"isGranted"),(0,a.kt)("br",{parentName:"p"}),"\n","Type: Boolean"),(0,a.kt)("p",null,"True if the user has granted permission to use notifications, else false."),(0,a.kt)("h2",{id:"notificationapi"},"NotificationApi"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"NotificationApi")," class is the interface to NotificationAPI."),(0,a.kt)("h3",{id:"fun-configurecredentials-notificationapicredentials-config-notificationapiconfig"},"fun configure(credentials: NotificationApiCredentials, config: NotificationApiConfig)"),(0,a.kt)("p",null,"Configures ",(0,a.kt)("inlineCode",{parentName:"p"},"NotificationApi")," to use your credentials. This should be invoked as early as possible (such as within your activity's ",(0,a.kt)("inlineCode",{parentName:"p"},"onCreate()"),") to ensure that the user does not miss and push notifications."),(0,a.kt)("h4",{id:"parameters-4"},"Parameters"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"credentials")," (required)",(0,a.kt)("br",{parentName:"p"}),"\n","Type: NotificationApiCredentials"),(0,a.kt)("p",null,"Your NotificationAPI credentials."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"config"),(0,a.kt)("br",{parentName:"p"}),"\n","Type: NotificationApiConfig"),(0,a.kt)("p",null,"Configuration object for ",(0,a.kt)("inlineCode",{parentName:"p"},"NotificationApi"),". Defaults to a default config."),(0,a.kt)("h3",{id:"fun-asknotificationpermissionsrequestcode-int"},"fun askNotificationPermissions(requestCode: Int)"),(0,a.kt)("p",null,"Asks the user permission to display push notifications."),(0,a.kt)("h4",{id:"parameters-5"},"Parameters"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"requestCode"),(0,a.kt)("br",{parentName:"p"}),"\n","Type: Int"),(0,a.kt)("p",null,"The request code to track permission requests. Defaults to 0."),(0,a.kt)("h2",{id:"notificationapicredentials"},"NotificationApiCredentials"),(0,a.kt)("p",null,"A data class for NotificationApi credentials"),(0,a.kt)("h3",{id:"constructor-notificationapicredentialsval-clientid-string-val-userid-string-val-hasheduserid-string"},"constructor NotificationApiCredentials(val clientId: String, val userId: String, val hashedUserId: String?)"),(0,a.kt)("h4",{id:"parameters-6"},"Parameters"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"clientId")," (required)",(0,a.kt)("br",{parentName:"p"}),"\n","Type: String"),(0,a.kt)("p",null,"Your NotificationAPI client id."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"userId"),"  (required)\nType: String"),(0,a.kt)("p",null,"The user id."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"hashedUserId"),(0,a.kt)("br",{parentName:"p"}),"\n","Type: String"),(0,a.kt)("p",null,"The hashed user id. Defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,a.kt)("h2",{id:"notificationapiconfig"},"NotificationApiConfig"),(0,a.kt)("p",null,"A data class for NotificationApi credentials"),(0,a.kt)("h3",{id:"constructor-notificationapiconfigval-baseurl-string"},"constructor NotificationApiConfig(val baseUrl: String)"),(0,a.kt)("h4",{id:"parameters-7"},"Parameters"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"baseUrl")," (required)",(0,a.kt)("br",{parentName:"p"}),"\n","Type: String"),(0,a.kt)("p",null,"The NotificationAPI API base url."))}u.isMDXComponent=!0}}]);