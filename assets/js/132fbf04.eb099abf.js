"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[131],{2657:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var t=n(4848),s=n(8453);const o={sidebar_position:6},a="Android SDK",r={id:"reference/android-sdk",title:"Android SDK",description:"The Android SDK is used to recieve push notifications and handle device token synchronization with NotificationAPI.",source:"@site/docs/reference/android-sdk.md",sourceDirName:"reference",slug:"/reference/android-sdk",permalink:"/reference/android-sdk",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"iOS SDK",permalink:"/reference/ios-sdk"},next:{title:"FAQ",permalink:"/faq"}},c={},d=[{value:"Setup",id:"setup",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"NotificationApiService",id:"notificationapiservice",level:2},{value:"fun onPreDisplayNotification(message: RemoteMessage)",id:"fun-onpredisplaynotificationmessage-remotemessage",level:3},{value:"Parameters",id:"parameters",level:4},{value:"fun displayNotification(intent: NotificationApiIntent, icon: Int, channelId: String, channelName: String): Int",id:"fun-displaynotificationintent-notificationapiintent-icon-int-channelid-string-channelname-string-int",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns",level:4},{value:"fun onNewToken(token: String)",id:"fun-onnewtokentoken-string",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"NotificationApiActivity",id:"notificationapiactivity",level:2},{value:"fun onNotificationClicked(message: RemoteMessage)",id:"fun-onnotificationclickedmessage-remotemessage",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"fun onNotificationRequestPermissionResult(isGranted: Boolean)",id:"fun-onnotificationrequestpermissionresultisgranted-boolean",level:3},{value:"NotificationApi",id:"notificationapi",level:2},{value:"fun configure(credentials: NotificationApiCredentials, config: NotificationApiConfig)",id:"fun-configurecredentials-notificationapicredentials-config-notificationapiconfig",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"fun askNotificationPermissions(requestCode: Int)",id:"fun-asknotificationpermissionsrequestcode-int",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"NotificationApiCredentials",id:"notificationapicredentials",level:2},{value:"constructor NotificationApiCredentials(val clientId: String, val userId: String, val hashedUserId: String?)",id:"constructor-notificationapicredentialsval-clientid-string-val-userid-string-val-hasheduserid-string",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"NotificationApiConfig",id:"notificationapiconfig",level:2},{value:"constructor NotificationApiConfig(val baseUrl: String)",id:"constructor-notificationapiconfigval-baseurl-string",level:3},{value:"Parameters",id:"parameters-7",level:4}];function l(e){const i={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"android-sdk",children:"Android SDK"})}),"\n",(0,t.jsxs)(i.p,{children:["The Android SDK is used to recieve ",(0,t.jsx)(i.strong,{children:"push notifications"})," and handle device token synchronization with NotificationAPI."]}),"\n",(0,t.jsx)(i.p,{children:"Supported environments:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Android API 24 and above"}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"setup",children:"Setup"}),"\n",(0,t.jsxs)(i.p,{children:["Add the JitPack repository in your ",(0,t.jsx)(i.code,{children:"build.gradle"}),"."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-gradle",children:"allprojects {\n    repositories {\n        ...\n        maven { url 'https://jitpack.io' }\n    }\n}\n"})}),"\n",(0,t.jsx)(i.p,{children:"Then add the Android SDK dependency."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-gradle",children:"dependencies {\n    implementation 'com.github.notificationapi:notificationapi-android-sdk:1.0.0'\n}\n"})}),"\n",(0,t.jsx)(i.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,t.jsxs)(i.p,{children:["Create a new service that extends from ",(0,t.jsx)(i.code,{children:"NotificationApiService"})]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-kotlin",metastring:'title="MyService.kt"',children:"class MyService: NotificationApiService() {\n\n    // Handle FCM tokens whenever they are generated\n    override fun onNewToken(token: String) {\n        super.onNewToken(token)\n    }\n\n    // Build notifications before displaying them to the user\n    override fun onPreDisplayNotification(message: RemoteMessage) {\n        val onClickIntent = NotificationApiIntent(this, MainActivity::class.java, message)\n\n        displayNotification(\n            intent = onClickIntent,\n            icon = android.R.drawable.ic_dialog_info\n        )\n    }\n}\n"})}),"\n",(0,t.jsxs)(i.p,{children:["Add your service to ",(0,t.jsx)(i.code,{children:"AndroidManifest.xml"})]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-xml",metastring:'title="AndroidManifext.xml"',children:'<service\n    android:name=".MyService"\n    android:exported="false">\n    <intent-filter>\n        <action android:name="com.google.firebase.MESSAGING_EVENT" />\n    </intent-filter>\n</service>\n'})}),"\n",(0,t.jsxs)(i.p,{children:["Create a new activity that extends from ",(0,t.jsx)(i.code,{children:"NotificationApiActivity"})]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-kotlin",metastring:'title="MainActivity.kt"',children:'class MainActivity : NotificationApiActivity() {\n    companion object {\n        const val TAG = "Example App"\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Configure NotificationAPI with credentials\n        NotificationApi.shared.configure(\n            NotificationApiCredentials(\n            clientId = "CLIENT_ID",\n            userId = "USER_ID"\n            )\n        )\n\n        // Request the user\'s permission to use notifications\n        NotificationApi.shared.askNotificationPermissions()\n    }\n\n    // Handle clicked notifications\n    override fun onNotificationClicked(message: RemoteMessage) {\n        super.onNotificationClicked(message)\n\n        Log.d(TAG, "Notification was clicked on")\n    }\n\n    // Handle notification permission request results\n    override fun onNotificationRequestPermissionResult(isGranted: Boolean) {\n        super.onNotificationRequestPermissionResult(isGranted)\n        Log.d(TAG, "Notifications are authorized?: $isGranted")\n    }\n}\n'})}),"\n",(0,t.jsxs)(i.p,{children:["You must configure the SDK with your ",(0,t.jsx)(i.code,{children:"NotificationAPI"})," credentials. It is recommended to configure the SDK as early as possible. You must also request notification authorization from the user."]}),"\n",(0,t.jsxs)(i.p,{children:["You are now ready to recieve push notifications from NotificationAPI! ","\ud83c\udf89"]}),"\n",(0,t.jsx)(i.h2,{id:"notificationapiservice",children:"NotificationApiService"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"NotificationApiService"})," class handles device token synchronization with NotificationAPI. It is required to extend from this class in order to recieve push notifications from NotificationAPI."]}),"\n",(0,t.jsx)(i.h3,{id:"fun-onpredisplaynotificationmessage-remotemessage",children:"fun onPreDisplayNotification(message: RemoteMessage)"}),"\n",(0,t.jsxs)(i.p,{children:["This function is called after ",(0,t.jsx)(i.code,{children:"NotificationApiService"})," has recieved a notification but before displaying the notification. You can override ",(0,t.jsx)(i.code,{children:"onPreDisplayNotification()"})," to customize how the notification will be displayed. To use the default notification display, you must call ",(0,t.jsx)(i.code,{children:"displayNotification()"})," here."]}),"\n",(0,t.jsx)(i.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"message"}),(0,t.jsx)(i.br,{}),"\n","Type: ",(0,t.jsx)(i.a,{href:"https://firebase.google.com/docs/reference/kotlin/com/google/firebase/messaging/RemoteMessage",children:"RemoteMessage"})]}),"\n",(0,t.jsx)(i.p,{children:"The Firebase message that contains the notification."}),"\n",(0,t.jsx)(i.admonition,{type:"info",children:(0,t.jsxs)(i.p,{children:["NotificationAPI sends notification data through Firebase as data messages instead of notification messages. You may use ",(0,t.jsx)(i.code,{children:'message.data["title"]'})," and ",(0,t.jsx)(i.code,{children:'message.data["body"]'})," to get the notification's title and body respectively. You can read more about data and notification messages at ",(0,t.jsx)(i.a,{href:"https://firebase.google.com/docs/cloud-messaging/concept-options#notifications_and_data_messages",children:"Firebase's documentation"}),"."]})}),"\n",(0,t.jsx)(i.h3,{id:"fun-displaynotificationintent-notificationapiintent-icon-int-channelid-string-channelname-string-int",children:"fun displayNotification(intent: NotificationApiIntent, icon: Int, channelId: String, channelName: String): Int"}),"\n",(0,t.jsxs)(i.p,{children:["This function displays a default notification to the given notification channel. This will create the notification channel if it does not exist. You should call this within ",(0,t.jsx)(i.code,{children:"onPreDisplayNotification()"})," to actually display the notification to the user."]}),"\n",(0,t.jsx)(i.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"intent"})," (required)",(0,t.jsx)(i.br,{}),"\n","Type: NotificationApiIntent"]}),"\n",(0,t.jsx)(i.p,{children:"An intent that contains the notification click handler as well as the remote message that will be displayed."}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"icon"})," (required)",(0,t.jsx)(i.br,{}),"\n","Type: Int"]}),"\n",(0,t.jsx)(i.p,{children:"The icon to display for the notification."}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"channelId"}),(0,t.jsx)(i.br,{}),"\n","Type: String"]}),"\n",(0,t.jsxs)(i.p,{children:["The channel id to use for displaying the notification. Defaults to ",(0,t.jsx)(i.code,{children:'"default"'}),"."]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"channelName"}),(0,t.jsx)(i.br,{}),"\n","Type: String"]}),"\n",(0,t.jsxs)(i.p,{children:["The user friendly name of the channel to display the notification in. Defaults to ",(0,t.jsx)(i.code,{children:'"Notifications"'})]}),"\n",(0,t.jsx)(i.h4,{id:"returns",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:"An UUID for the displayed notification."}),"\n",(0,t.jsx)(i.h3,{id:"fun-onnewtokentoken-string",children:"fun onNewToken(token: String)"}),"\n",(0,t.jsx)(i.p,{children:"This function is called when FCM generates a new device token."}),"\n",(0,t.jsx)(i.admonition,{type:"info",children:(0,t.jsxs)(i.p,{children:["You should always call ",(0,t.jsx)(i.code,{children:"super.onNewToken(token)"})," to allow ",(0,t.jsx)(i.code,{children:"NotificationApiService"})," to sync the device token to NotificationApi."]})}),"\n",(0,t.jsx)(i.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"token"}),(0,t.jsx)(i.br,{}),"\n","Type: String"]}),"\n",(0,t.jsx)(i.p,{children:"The FCM device token."}),"\n",(0,t.jsx)(i.h2,{id:"notificationapiactivity",children:"NotificationApiActivity"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"NotificationApiActivity"})," class initializes the ",(0,t.jsx)(i.code,{children:"NotificationApi"})," instance and provides functionality to handle notification clicking and notification permission request results. It is recommended to extend from this class."]}),"\n",(0,t.jsx)(i.h3,{id:"fun-onnotificationclickedmessage-remotemessage",children:"fun onNotificationClicked(message: RemoteMessage)"}),"\n",(0,t.jsx)(i.p,{children:"This function is called when a notification has been clicked on by an user."}),"\n",(0,t.jsx)(i.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"message"}),(0,t.jsx)(i.br,{}),"\n","Type: ",(0,t.jsx)(i.a,{href:"https://firebase.google.com/docs/reference/kotlin/com/google/firebase/messaging/RemoteMessage",children:"RemoteMessage"})]}),"\n",(0,t.jsx)(i.p,{children:"The notification that was clicked on."}),"\n",(0,t.jsx)(i.admonition,{type:"info",children:(0,t.jsxs)(i.p,{children:["NotificationAPI sends notification data through Firebase as data messages instead of notification messages. You may use ",(0,t.jsx)(i.code,{children:'message.data["title"]'})," and ",(0,t.jsx)(i.code,{children:'message.data["body"]'})," to get the notification's title and body respectively. You can read more about data and notification messages at ",(0,t.jsx)(i.a,{href:"https://firebase.google.com/docs/cloud-messaging/concept-options#notifications_and_data_messages",children:"Firebase's documentation"}),"."]})}),"\n",(0,t.jsx)(i.h3,{id:"fun-onnotificationrequestpermissionresultisgranted-boolean",children:"fun onNotificationRequestPermissionResult(isGranted: Boolean)"}),"\n",(0,t.jsxs)(i.p,{children:["This function is called when the user has responded to ",(0,t.jsx)(i.code,{children:"NotificationApi.askNotificationPermissions()"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"isGranted"}),(0,t.jsx)(i.br,{}),"\n","Type: Boolean"]}),"\n",(0,t.jsx)(i.p,{children:"True if the user has granted permission to use notifications, else false."}),"\n",(0,t.jsx)(i.h2,{id:"notificationapi",children:"NotificationApi"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"NotificationApi"})," class is the interface to NotificationAPI."]}),"\n",(0,t.jsx)(i.h3,{id:"fun-configurecredentials-notificationapicredentials-config-notificationapiconfig",children:"fun configure(credentials: NotificationApiCredentials, config: NotificationApiConfig)"}),"\n",(0,t.jsxs)(i.p,{children:["Configures ",(0,t.jsx)(i.code,{children:"NotificationApi"})," to use your credentials. This should be invoked as early as possible (such as within your activity's ",(0,t.jsx)(i.code,{children:"onCreate()"}),") to ensure that the user does not miss and push notifications."]}),"\n",(0,t.jsx)(i.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"credentials"})," (required)",(0,t.jsx)(i.br,{}),"\n","Type: NotificationApiCredentials"]}),"\n",(0,t.jsx)(i.p,{children:"Your NotificationAPI credentials."}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"config"}),(0,t.jsx)(i.br,{}),"\n","Type: NotificationApiConfig"]}),"\n",(0,t.jsxs)(i.p,{children:["Configuration object for ",(0,t.jsx)(i.code,{children:"NotificationApi"}),". Defaults to a default config."]}),"\n",(0,t.jsx)(i.h3,{id:"fun-asknotificationpermissionsrequestcode-int",children:"fun askNotificationPermissions(requestCode: Int)"}),"\n",(0,t.jsx)(i.p,{children:"Asks the user permission to display push notifications."}),"\n",(0,t.jsx)(i.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"requestCode"}),(0,t.jsx)(i.br,{}),"\n","Type: Int"]}),"\n",(0,t.jsx)(i.p,{children:"The request code to track permission requests. Defaults to 0."}),"\n",(0,t.jsx)(i.h2,{id:"notificationapicredentials",children:"NotificationApiCredentials"}),"\n",(0,t.jsx)(i.p,{children:"A data class for NotificationApi credentials"}),"\n",(0,t.jsx)(i.h3,{id:"constructor-notificationapicredentialsval-clientid-string-val-userid-string-val-hasheduserid-string",children:"constructor NotificationApiCredentials(val clientId: String, val userId: String, val hashedUserId: String?)"}),"\n",(0,t.jsx)(i.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"clientId"})," (required)",(0,t.jsx)(i.br,{}),"\n","Type: String"]}),"\n",(0,t.jsx)(i.p,{children:"Your NotificationAPI client id."}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"userId"})," (required)\nType: String"]}),"\n",(0,t.jsx)(i.p,{children:"The user id."}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"hashedUserId"}),(0,t.jsx)(i.br,{}),"\n","Type: String"]}),"\n",(0,t.jsxs)(i.p,{children:["The hashed user id. Defaults to ",(0,t.jsx)(i.code,{children:"null"}),"."]}),"\n",(0,t.jsx)(i.h2,{id:"notificationapiconfig",children:"NotificationApiConfig"}),"\n",(0,t.jsx)(i.p,{children:"A data class for NotificationApi credentials"}),"\n",(0,t.jsx)(i.h3,{id:"constructor-notificationapiconfigval-baseurl-string",children:"constructor NotificationApiConfig(val baseUrl: String)"}),"\n",(0,t.jsx)(i.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"baseUrl"})," (required)",(0,t.jsx)(i.br,{}),"\n","Type: String"]}),"\n",(0,t.jsx)(i.p,{children:"The NotificationAPI API base url."})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>r});var t=n(6540);const s={},o=t.createContext(s);function a(e){const i=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(o.Provider,{value:i},e.children)}}}]);